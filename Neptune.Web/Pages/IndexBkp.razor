@page "/bkp"
@using System.Text
@using System.Diagnostics
@using System.Text.Json
@using System.Globalization

@inject NavigationManager NavManager
@inject PagesService _pagesService

<div id="tudo" style="height: 100vh;" @onmousedown="MouseDown">
    <div id="selecao-contas" style="display: block;float: left;width: 210px;">
        <div>
            Contas
        </div>
            
        <ul style="float: left;" >            
            @foreach (var conta in contas)
            {
                <EditForm Model="conta">
                    <li>
                        @if (conta.Selecionada)
                        {
                            <input type="checkbox" checked name="@conta.Id" @onchange="@(() => ContaClick(conta.Id, false))"/>
                        }
                        else
                        {
                            <input type="checkbox" name="@conta.Id" @onchange="@(() => ContaClick(conta.Id, true))"/>
                        }
                        @conta.Id - @conta.Nome
                    </li>
                </EditForm>
            }
        </ul>
    </div>

    <div id="navegacao-e-transacoes" style="margin:8px;display: grid;"  >
        <div id="navegacao">
            <button @onclick="IrParaMesAnterior" >anterior</button>
            <span>Mês nº @mesAtual.NumMes</span>
            <button @onclick="IrParaMesSeguinte" >seguinte</button>
        </div>
        <div id="adicionar-transacao" style="margin: 8px;">
            <button @onclick="AdicionarTransacao" >+ transacao</button>
        </div>
        <div id="mensagem">
            @mensagem 
        </div>
        
        @if (modoAdicionarTransacao)
        {
            <EditForm Model="mesAtual.NovaTransacao">
                <div id="nova-transacao" style="float:left;margin:8px;width:100%;" @onmouseover="@(() => mouseOverNovaTransacao = true)" @onmouseout="@(() => mouseOverNovaTransacao = false)" >
                    <table class="table transacoes">
                        <tbody>
                            <tr style="background-color: #efefef">
                                <td><input type="date" id="meeting-time" name="meeting-time" @bind-value="mesAtual.NovaTransacao.Data" min="2015-01-01" max="2050-01-01"></td>
                                <td><input type="text" id="nova-transacao-descricao" @bind-value="mesAtual.NovaTransacao.Descricao" /></td>
                                <td>Categoria</td>
                                <td>
                                    <select @bind="mesAtual.NovaTransacao.ContaId">
                                        <option selected value="0">Selecione</option>
                                        @foreach(var c in contas)
                                        {
                                            <option value="@c.Id">@c.Nome</option>
                                        }
                                    </select>
                                    
                                </td>
                                <td>R$ 
                                    <input type="text" id="meu-campo-valor" value="0,00" onkeyup="chamaDotNet()" 
                                                                                         onkeydown="if ([48,49,50,51,52,53,54,55,56,57,96,97,98,99,100,101,102,103,104,105].includes(event.which)) { 
                                                                                                        let valor = this.value; 
                                                                                                        let valorFloat = parseFloat(valor.replace(',', '.'));      
                                                                                                        let valorFloatM10 = valorFloat * 10; 
                                                                                                        let valorFloatD10Round2 = (Math.round(valorFloatM10 * 100) / 100).toFixed(2); 
                                                                                                        let input = event.key;                                                          
                                                                                                        let inputInt = parseInt(event.key);                                             
                                                                                                        let inputIntDiv100 = parseInt(event.key) / 100;                                 
                                                                                                        let inputIntDiv100Round2 = (Math.round(inputIntDiv100 * 100) / 100).toFixed(2); 
                                                                                                        let ehNegativo = valorFloatD10Round2 < 0;
                                                                                                        let soma = parseFloat(Math.abs(valorFloatD10Round2)) + parseFloat(inputIntDiv100Round2); 
                                                                                                        let somaRound2 = (Math.round(soma * 100) / 100).toFixed(2);
                                                                                                        let sinal = ehNegativo ? '-' : '';
                                                                                                        this.value = sinal + somaRound2.toString().replace('.', ',')
                                                                                                        return false;
                                                                                                    }
                                                                                                    else if (event.which == 8) { // backspace
                                                                                                        let valorReplaceVirgulaPorPonto = this.value.replace(',','.');
                                                                                                        let valorReplaceVirgulaPorPontoFloat = parseFloat(valorReplaceVirgulaPorPonto);
                                                                                                        let valorReplaceVirgulaPorPontoFloatD10 = valorReplaceVirgulaPorPontoFloat / 10;
                                                                                                        let valorReplaceVirgulaPorPontoFloatD10R2 = 0;
                                                                                                        let ehNegativo = valorReplaceVirgulaPorPontoFloatD10 < 0;
                                                                                                        if (ehNegativo){
                                                                                                            valorReplaceVirgulaPorPontoFloatD10R2 = (Math.ceil(valorReplaceVirgulaPorPontoFloatD10 * 100) / 100).toFixed(2);
                                                                                                        } else {
                                                                                                            valorReplaceVirgulaPorPontoFloatD10R2 = (Math.floor(valorReplaceVirgulaPorPontoFloatD10 * 100) / 100).toFixed(2);
                                                                                                        }
                                                                                                        this.value = valorReplaceVirgulaPorPontoFloatD10R2.toString().replace('.', ',');
                                                                                                        return false;
                                                                                                    }
                                                                                                    else if (event.which == 109 || event.which == 189) { //minus
                                                                                                        let valor = this.value;
                                                                                                        let ehNegativo = this.value[0] == '-';
                                                                                                        if (!ehNegativo) {
                                                                                                            this.value = ((Math.floor((parseFloat(this.value.replace(',','.')) * -1) * 100) / 100).toFixed(2)).toString().replace('.', ',');;
                                                                                                        }
                                                                                                        return false;
                                                                                                    }
                                                                                                    else if (event.which == 107 || event.which == 187) { // plus
                                                                                                        let ehNegativo = this.value[0] == '-';
                                                                                                        if (ehNegativo) {
                                                                                                            this.value = ((Math.floor((parseFloat(this.value.replace(',','.')) * -1) * 100) / 100).toFixed(2)).toString().replace('.', ',');;
                                                                                                        }
                                                                                                        return false;
                                                                                                    }
                                                                                                    else {
                                                                                                        return false;
                                                                                                    }" />
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </EditForm>
        }

        <div id="transacoes" style="float: left;margin: 8px;width: 100%;">
            <table class="table transacoes">
                <thead>
                    <tr>
                        <th>Descricao</th>
                        <th>Categoria</th>
                        <th>Conta</th>
                        <th>Valor</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th colspan="6" style="text-align: right;">
                            Saldo no dia @mesAtual.UltimoDiaMesAnterior: R$ @FormatarMoeda(mesAtual.SaldoFinalUltimoDiaMesAnterior.Valor)
                        </th>
                    </tr>

                    @if (mesAtual.Dias != null && mesAtual.Dias.Any())
                    {
                        @foreach (var dia in mesAtual.DiasExibicao)
                        {
                            <tr>
                                <td colspan="4">@dia.Data.ToString("dd/MM/yyyy")</td>
                            </tr>
                            @foreach (var transacao in dia.TransacoesExibicao)
                            {
                                <tr style="background-color: #cccccc">
                                    <td>@transacao.Descricao</td>
                                    <td>@transacao.Categoria</td>
                                    <td>
                                        <select style="background: #cccccc;color: #000;border: 2px solid #cccccc;-webkit-appearance: none;" disabled="disabled">
                                            @foreach(var c in contas)
                                            {
                                                if (c.Id == transacao.Conta.Id)
                                                {
                                                    <option selected>@c.Nome</option>
                                                }
                                                else
                                                {
                                                    <option>@c.Nome</option>                                                    
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>R$ @FormatarMoeda(transacao.Valor)</td>
                                </tr>
                            }
                            <tr>
                                <td colspan="4" style="text-align: right;">Saldo do dia: R$ @FormatarMoeda(dia.SaldoFinalDoDia.Valor)</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

    </div>

</div>

@code {
    [JSInvokable]
    public static void ChamaDotNet(JsonElement valor)
    {
        string valorAdjust = valor.GetRawText().Replace("\"", "");
        novaTransacaoValor = Convert.ToDecimal(valorAdjust, new CultureInfo("pt-BR"));
    }

    public string FormatarMoeda(decimal valor)
    {
        return (valor.ToString().Contains(".") || valor.ToString().Contains(",")) ? valor.ToString() : valor + ",00";
    }

    private Meses meses;
    private List<Conta> contas;

    private static decimal novaTransacaoValor;

    private List<string> digitosValor = new List<string>();
    private string valorrr = "0,00";

    async Task DigitouValor(KeyboardEventArgs e)
    {
        await Task.Run(() =>
        {
        });
    }

    async Task DigitandoValor(KeyboardEventArgs e)
    {
        await Task.Run(() =>
        {
            if (!int.TryParse(e.Key, out int n))
            {

                string valor2 = valorrr;
                valorrr = valor2;
                return;
            }

            string texto = e.Key;
            valorrr = valorrr + texto;

            var sb = new StringBuilder();
            var valorrrSemVirgula = valorrr.Replace(",", "");
            var tamanho = valorrrSemVirgula.Count();
            for (var i = 0; i < tamanho; i++)
            {
                if (i == tamanho - 2)
                    sb.Append(",");

                sb.Append(valorrrSemVirgula[i]);
            }
            var parteInteira = sb.ToString().Split(",")[0].ToCharArray();

            var novaParteInteira = sb.ToString().Split(",")[0].TrimStart('0');

            if (string.IsNullOrEmpty(novaParteInteira))
            {
                novaParteInteira = "0";
            }

            valorrr = novaParteInteira.ToString() + "," + sb.ToString().Split(",")[1];
    });
    }

    private DataMes dataMes;

    private string navMesAnterior => (NavManager.BaseUri + mesAtual.NavMesAnterior);
    private string navMesSeguinte => (NavManager.BaseUri + mesAtual.NavMesSeguinte);

    private Mes mesAtual => meses.ObterMes(dataMes);

    private bool mouseOverNovaTransacao;
    private bool modoAdicionarTransacao = false;

    private string mensagem;

    protected override async Task OnInitializedAsync()
    {
        dataMes = new DataMes(DateTime.Now.Year, DateTime.Now.Month);

        contas = await _pagesService.ObterContas();
        contas.ForEach(x => x.SetarSelecionada(true));
        meses = await _pagesService.ObterMeses_old(contas);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    void IrParaMesAnterior()
    {
        var numMesAnterior = mesAtual.DataMes.NumMesAnterior;
        var numAnoMesAnteior = mesAtual.DataMes.NumAnoDoMesAnterior;
        dataMes = new DataMes(numAnoMesAnteior, numMesAnterior);
    }

    void IrParaMesSeguinte()
    {
        var numMesSeguinte = mesAtual.DataMes.NumMesSeguinte;
        var numAnoMesSeguinte = mesAtual.DataMes.NumAnoDoMesSeguinte;
        dataMes = new DataMes(numAnoMesSeguinte, numMesSeguinte);
    }

    async Task ContaClick(int id, bool selecionada)
    {
        await Task.Run(() =>
        {
            var conta = contas.First(x => x.Id == id);
            conta.SetarSelecionada(selecionada);
        });
    }

    async Task AdicionarTransacao()
    {
        await Task.Run(() =>
        {
            modoAdicionarTransacao = true;
        });
    }

    async Task MouseDown()
    {
        if (!mouseOverNovaTransacao && modoAdicionarTransacao)
        {
            if (mesAtual.NovaTransacao.NovaTransacaoEhValida())
            {
                var conta = contas.First(x => x.Id == mesAtual.NovaTransacao.ContaId);
                mesAtual.NovaTransacao.Conta = conta;
                mesAtual.NovaTransacao.Valor = novaTransacaoValor;
                var resultadoMensagem = await _pagesService.AdicionarTransacao_old(meses, mesAtual.NovaTransacao);

                if (!string.IsNullOrEmpty(resultadoMensagem))
                    mensagem = $"Ocorreu um erro ao adicionar a transacao {resultadoMensagem}";
            }
            else
            {
                mesAtual.NovaTransacao = new();
            }
            modoAdicionarTransacao = false;
        }
    } 
}
