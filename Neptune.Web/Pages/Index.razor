@page "/"
@using System.Text
@using System.Diagnostics
@using System.Text.Json
@using System.Globalization

@inject NavigationManager NavManager
@inject PagesService _pagesService

<div id="tudo" style="height: 100vh;"@onmousedown="MouseDown" >
    <div id="selecao-contas" style="display: block;float: left;width: 210px;">
        <div>
            Contas
        </div>
            
        <ul style="float: left;" >            
            @foreach (var conta in _contas)
            {
                <EditForm Model="conta">
                    <li>
                        @if (conta.Selecionada)
                        {
                            <input type="checkbox" checked name="@conta.Id" @onchange="@(() => { conta.SetarSelecionada(false);})"/>
                        }
                        else
                        {
                            <input type="checkbox" name="@conta.Id" @onchange="@(() => { conta.SetarSelecionada(true);})"/>
                        }
                        @conta.Id - @conta.Nome - @conta.Guid
                    </li>
                </EditForm>
            }
        </ul>
    </div>

    <div id="navegacao-e-transacoes" style="margin:8px;display: grid;"  >
        <div id="navegacao">
            <button @onclick="IrParaMesAnterior" >anterior</button>
            <span>Mês nº @_dataMes.Mes</span>
            <button @onclick="IrParaMesSeguinte" >seguinte</button>
        </div>
        <div id="adicionar-transacao" style="margin: 8px;">
            <button @onclick="AdicionarTransacao" >+ transacao</button>
        </div>
        <div id="mensagem">
            @mensagem 
        </div>
        
        @if (modoAdicionarTransacao)
        {
            <EditForm Model="_novaTransacao">
                <div id="nova-transacao" style="float:left;margin:8px;width:100%;" @onmouseover="@(() => mouseOverNovaTransacao = true)" @onmouseout="@(() => mouseOverNovaTransacao = false)" >
                    <table class="table transacoes">
                        <tbody>
                            <tr style="background-color: #efefef">
                                <td><input type="date" id="meeting-time" name="meeting-time" @bind-value="_novaTransacao.Data" min="2015-01-01" max="2050-01-01"></td>
                                <td><input type="text" id="nova-transacao-descricao" @bind-value="_novaTransacao.Descricao" /></td>
                                <td>Categoria</td>
                                <td>
                                    <select @bind="_novaTransacao.Conta.Id">
                                        <option selected value="0">Selecione</option>
                                        @foreach(var c in _contas)
                                        {
                                            <option value="@c.Id">@c.Nome</option>
                                        }
                                    </select>
                                    
                                </td>
                                <td>R$ 
                                    <input type="text" id="meu-campo-valor" value="0,00" onkeyup="chamaDotNet()" 
                                                                                         onkeydown="if ([48,49,50,51,52,53,54,55,56,57,96,97,98,99,100,101,102,103,104,105].includes(event.which)) { 
                                                                                                        let valor = this.value; 
                                                                                                        let valorFloat = parseFloat(valor.replace(',', '.'));      
                                                                                                        let valorFloatM10 = valorFloat * 10; 
                                                                                                        let valorFloatD10Round2 = (Math.round(valorFloatM10 * 100) / 100).toFixed(2); 
                                                                                                        let input = event.key;                                                          
                                                                                                        let inputInt = parseInt(event.key);                                             
                                                                                                        let inputIntDiv100 = parseInt(event.key) / 100;                                 
                                                                                                        let inputIntDiv100Round2 = (Math.round(inputIntDiv100 * 100) / 100).toFixed(2); 
                                                                                                        let ehNegativo = valorFloatD10Round2 < 0;
                                                                                                        let soma = parseFloat(Math.abs(valorFloatD10Round2)) + parseFloat(inputIntDiv100Round2); 
                                                                                                        let somaRound2 = (Math.round(soma * 100) / 100).toFixed(2);
                                                                                                        let sinal = ehNegativo ? '-' : '';
                                                                                                        this.value = sinal + somaRound2.toString().replace('.', ',')
                                                                                                        return false;
                                                                                                    }
                                                                                                    else if (event.which == 8) { // backspace
                                                                                                        let valorReplaceVirgulaPorPonto = this.value.replace(',','.');
                                                                                                        let valorReplaceVirgulaPorPontoFloat = parseFloat(valorReplaceVirgulaPorPonto);
                                                                                                        let valorReplaceVirgulaPorPontoFloatD10 = valorReplaceVirgulaPorPontoFloat / 10;
                                                                                                        let valorReplaceVirgulaPorPontoFloatD10R2 = 0;
                                                                                                        let ehNegativo = valorReplaceVirgulaPorPontoFloatD10 < 0;
                                                                                                        if (ehNegativo){
                                                                                                            valorReplaceVirgulaPorPontoFloatD10R2 = (Math.ceil(valorReplaceVirgulaPorPontoFloatD10 * 100) / 100).toFixed(2);
                                                                                                        } else {
                                                                                                            valorReplaceVirgulaPorPontoFloatD10R2 = (Math.floor(valorReplaceVirgulaPorPontoFloatD10 * 100) / 100).toFixed(2);
                                                                                                        }
                                                                                                        this.value = valorReplaceVirgulaPorPontoFloatD10R2.toString().replace('.', ',');
                                                                                                        return false;
                                                                                                    }
                                                                                                    else if (event.which == 109 || event.which == 189) { //minus
                                                                                                        let valor = this.value;
                                                                                                        let ehNegativo = this.value[0] == '-';
                                                                                                        if (!ehNegativo) {
                                                                                                            this.value = ((Math.floor((parseFloat(this.value.replace(',','.')) * -1) * 100) / 100).toFixed(2)).toString().replace('.', ',');;
                                                                                                        }
                                                                                                        return false;
                                                                                                    }
                                                                                                    else if (event.which == 107 || event.which == 187) { // plus
                                                                                                        let ehNegativo = this.value[0] == '-';
                                                                                                        if (ehNegativo) {
                                                                                                            this.value = ((Math.floor((parseFloat(this.value.replace(',','.')) * -1) * 100) / 100).toFixed(2)).toString().replace('.', ',');;
                                                                                                        }
                                                                                                        return false;
                                                                                                    }
                                                                                                    else {
                                                                                                        return false;
                                                                                                    }" />
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </EditForm>
        }

        <div id="transacoes" style="float: left;margin: 8px;width: 100%;">
            <table class="table transacoes">
                <thead>
                    <tr>
                        <th>Descricao</th>
                        <th>Categoria</th>
                        <th>Conta</th>
                        <th>Valor</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var transacoesAnteriores = _transacoes.Where(x => x.Data.Year == _dataMes.Ano && x.Data.Month < _dataMes.Mes && x.Conta.Selecionada);
                        var somaTransacoesAnteriores = transacoesAnteriores.Sum(x => x.Valor);
                        var saldoInicialContas = _contas.Where(x => x.Selecionada).Sum(x => x.SaldoInicial);
                        var saldoFinalUltimoDiaMesAnterior = saldoInicialContas + somaTransacoesAnteriores;

                        <tr>
                            <th colspan="6" style="text-align: right;">
                                Saldo no dia @_dataMes.UltimoDiaDoMesAnteriorFormat: R$ @FormatarMoeda(saldoFinalUltimoDiaMesAnterior)
                            </th>
                        </tr>

                        var saldoTemp = saldoFinalUltimoDiaMesAnterior;
                        var dia = 0;

                        @foreach (var diaTransacoes in _transacoesMesContas.GroupBy(x => x.Data))
                        {
                            var diaDiferente = dia != diaTransacoes.Key.Day;
                            if (diaDiferente)
                            {
                                <tr>
                                    <td colspan="4">DAtA => @diaTransacoes.Key.ToString("dd/MM/yyyy")</td>
                                </tr>

                                dia = diaTransacoes.Key.Day;
                            }

                            decimal somaTransacoesDia = diaTransacoes.Sum(x => x.Valor);
                            saldoTemp += somaTransacoesDia; 

                            @foreach (var t in diaTransacoes)
                            {
                                <tr style="background-color: #cccccc">
                                    <td>@t.Descricao --- GUID-Conta @t.Conta.Guid --- TransacaoId @t.Id</td>
                                    <td>@t.Categoria</td>
                                    <td>
                                        <select style="background: #cccccc;color: #000;border: 2px solid #cccccc;-webkit-appearance: none;" disabled="disabled">
                                            @foreach (var c in _contas)
                                            {
                                                if (c.Id == t.Conta.Id)
                                                {
                                                    <option selected>@c.Nome</option>
                                                }
                                                else
                                                {
                                                    <option>@c.Nome</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>R$ @FormatarMoeda(t.Valor)</td>
                                </tr>
                            }

                            if (diaDiferente)
                            {
                                <tr>
                                    <td colspan="4" style="text-align: right;">Saldo do dia: R$ @FormatarMoeda(saldoTemp)</td>
                                </tr>
                            }
                        }
                }
                </tbody>
            </table>
        </div>

    </div>

</div>

@code {
    private List<Transacao> _transacoes;
    private IEnumerable<Transacao> _transacoesMesContas => _transacoes.DistinctBy(x => x.Id).Where(t => t.Data.Year == _dataMes.Ano && t.Data.Month == _dataMes.Mes && t.Conta.Selecionada).Distinct();
    private List<Conta> _contas;

    private bool mouseOverNovaTransacao;
    private bool modoAdicionarTransacao = false;

    private string mensagem;

    private static decimal novaTransacaoValor;

    private List<string> digitosValor = new List<string>();
    private string valorrr = "0,00";
    private DataMes _dataMes;

    private Transacao? _novaTransacao = new Transacao().ObterNovaTransacao();

    private string navMesAnterior => (NavManager.BaseUri + $"?ano={_dataMes.NumAnoDoMesAnterior}&mes={_dataMes.NumMesAnterior}");
    private string navMesSeguinte => (NavManager.BaseUri + $"?ano={_dataMes.NumAnoDoMesSeguinte}&mes={_dataMes.NumMesSeguinte}");



    protected override async Task OnInitializedAsync()
    {
        _dataMes = new DataMes(DateTime.Now.Year, DateTime.Now.Month);

        _contas = await _pagesService.ObterContas();
        _contas.ForEach(x => x.SetarSelecionada(true));
        _transacoes = await _pagesService.ObterTodasTransacoes();
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    void IrParaMesAnterior()
    {
        var numMesAnterior = _dataMes.NumMesAnterior;
        var numAnoMesAnteior = _dataMes.NumAnoDoMesAnterior;
        _dataMes = new DataMes(numAnoMesAnteior, numMesAnterior);
    }

    void IrParaMesSeguinte()
    {
        var numMesSeguinte = _dataMes.NumMesSeguinte;
        var numAnoMesSeguinte = _dataMes.NumAnoDoMesSeguinte;
        _dataMes = new DataMes(numAnoMesSeguinte, numMesSeguinte);
    }

    void AdicionarTransacao()
    {
        modoAdicionarTransacao = true;
    }

    private decimal ObterSaldoFinalDoDia(object x)
    {
        return 0.2M;
    }

    [JSInvokable]
    public static void ChamaDotNet(JsonElement valor)
    {
        string valorAdjust = valor.GetRawText().Replace("\"", "");
        novaTransacaoValor = Convert.ToDecimal(valorAdjust, new CultureInfo("pt-BR"));
    }

    public string FormatarMoeda(decimal valor)
    {
        return (valor.ToString().Contains(".") || valor.ToString().Contains(",")) ? valor.ToString() : valor + ",00";
    }

    void MouseDown()
    {
        if (!mouseOverNovaTransacao && modoAdicionarTransacao)
        {
            if (_novaTransacao != null && _novaTransacao.NovaTransacaoEhValida())
            {
                var conta = _contas.First(x => x.Id == _novaTransacao.Conta.Id);
                _novaTransacao.Conta = conta;
                _novaTransacao.Valor = novaTransacaoValor;
                var resultadoMensagem = _pagesService.AdicionarTransacao(_novaTransacao).Result;

                if (resultadoMensagem == null)
                {
                    mensagem = $"Ocorreu um erro ao adicionar a transacao {resultadoMensagem}";
                    Console.WriteLine(mensagem);
                    Debug.WriteLine(mensagem);
                }
                else
                {
                    Console.WriteLine("TRANSACAO ADICIONADA Id: " + resultadoMensagem.Id);
                    Debug.WriteLine("TRANSACAO ADICIONADA Id: " + resultadoMensagem.Id);
                    _novaTransacao = new Transacao().ObterNovaTransacao();
                }
            }

            modoAdicionarTransacao = false;
        }
    } 
}
