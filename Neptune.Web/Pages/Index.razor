@page "/"

@inject NavigationManager NavManager

@inject ITransacaoService _transacaoService
@inject IContaService _contaService
@inject ICategoriaService _categoriaService

<div id="tudo" style="height: 100vh;width:60%;">
    <div id="coluna" style="width: 190px;">
        <ContasComponent @bind-Itens="_contas" />
        <CategoriasComponent @bind-Itens="_categorias" />
    </div>

    <div id="navegacao-e-transacoes" style="margin:8px;display:grid;">
        <div id="navegacao">
            <button @onclick="IrParaMesAnterior">anterior</button>
            <span>Mês nº @_dataMes.Mes</span>
            <button @onclick="IrParaMesSeguinte">seguinte</button>
        </div>

        <div id="adicionar-transacao" style="margin: 8px;">
            <button @onclick="(() => { modoAdicionarTransacao = true; })">+ transacao</button>
        </div>
        
        @if (modoAdicionarTransacao)
        {
            <NovaTransacaoComponent @bind-ModoAdicionarTransacao="modoAdicionarTransacao" NovaTransacao="_novaTransacao" 
                Contas="_contas" Categorias="_categorias"  />
        }

        <div id="transacoes" style="float: left;margin: 8px;width: 100%;">
            <table class="table transacoes">
                <thead>
                    <tr>
                        <th>Descricao</th>
                        <th>Categoria</th>
                        <th>Conta</th>
                        <th>Valor</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var transacoesMesAtualFilter = _transacoes?.Where(t => t.Data.Year == _dataMes.Ano &&
                                                             t.Data.Month == _dataMes.Mes &&
                                                             t.Conta.Selecionada &&
                                                             t.Categoria.Selecionada).ToList();
                        var transacoesMesAtual = transacoesMesAtualFilter.GroupBy(x => new { x.Data.Year, x.Data.Month, x.Data.Day });

                        var somaTransacoesAnteriores = _transacoes?.Where(x => x.Data.EhAntes(_dataMes) &&
                                                                               x.Conta.Selecionada && 
                                                                               x.Categoria.Selecionada)
                                                                   .Sum(x => x.Valor);
                        var saldoInicialContas = _contas.Where(x => x.Selecionada).Sum(x => x.SaldoInicial);
                        var saldoFinalUltimoDiaMesAnterior = saldoInicialContas + somaTransacoesAnteriores.Value;

                        <tr>
                            <th colspan="6" style="text-align: right;">
                                Saldo no dia @_dataMes.UltimoDiaDoMesAnteriorFormat&nbsp;&nbsp;&nbsp; R$ @FormatarMoeda(saldoFinalUltimoDiaMesAnterior)
                            </th>
                        </tr>

                        var saldoTemp = saldoFinalUltimoDiaMesAnterior;
                        var dia = 0;

                        @foreach (var diaTransacoes in transacoesMesAtual)
                        {
                            var diaDiferente = dia != diaTransacoes.Key.Day;
                            if (diaDiferente)
                            {
                                <tr>
                                    <td colspan="4">@diaTransacoes.Key.Day/@diaTransacoes.Key.Month.ToString().PadLeft(2, '0')/@diaTransacoes.Key.Year</td>
                                </tr>

                                dia = diaTransacoes.Key.Day;
                            }

                            decimal somaTransacoesDia = diaTransacoes.Sum(x => x.Valor);
                            saldoTemp += somaTransacoesDia;

                            var count = 0;
                            @foreach (Transacao t in diaTransacoes)
                            {
                                <tr style="background-color: #cccccc">
                                    <td>@t.Descricao</td>
                                    <td>@t.Categoria.Descricao</td>
                                    <td>
                                        <select style="background: #cccccc;color: #000;border: 2px solid #cccccc;-webkit-appearance: none;" disabled="disabled">
                                            @foreach (var c in _contas)
                                            {
                                                if (c.Id == t.Conta.Id)
                                                {
                                                    <option selected>@c.Nome</option>
                                                }
                                                else
                                                {
                                                    <option>@c.Nome</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>R$ @FormatarMoeda(t.Valor)</td>
                                </tr>

                                count = count + 1;
                            }

                            if (count == diaTransacoes.Count())
                            {
                                <tr>
                                    <td colspan="4" style="text-align: right;">Saldo do dia: R$ @FormatarMoeda(saldoTemp)</td>
                                </tr>
                            }
                        }
                }
                </tbody>
            </table>
        </div>
    </div>

</div>

@code {
    private List<Transacao>? _transacoes;
    private Categorias? _categorias;
    private List<Conta>? _contas;
    private DataMes _dataMes;

    private bool mouseOverNovaTransacao;
    private bool modoAdicionarTransacao = false;

    private string mensagem;


    private List<string> digitosValor = new List<string>();
    private string valorrr = "0,00";

    private Transacao? _novaTransacao = new Transacao().ObterNovaTransacao();

    protected override async Task OnInitializedAsync()
    {
        _dataMes = new DataMes(DateTime.Now.Year, DateTime.Now.Month);

        _contas = await _contaService.ObterTodas();
        _transacoes = await _transacaoService.ObterTodas();
        _categorias = await _categoriaService.ObterTodasComFilhos();
    }

    void IrParaMesAnterior()
    {
        var numMesAnterior = _dataMes.NumMesAnterior;
        var numAnoMesAnteior = _dataMes.NumAnoDoMesAnterior;
        _dataMes = new DataMes(numAnoMesAnteior, numMesAnterior);
    }

    void IrParaMesSeguinte()
    {
        var numMesSeguinte = _dataMes.NumMesSeguinte;
        var numAnoMesSeguinte = _dataMes.NumAnoDoMesSeguinte;
        _dataMes = new DataMes(numAnoMesSeguinte, numMesSeguinte);
    }

    public string FormatarMoeda(decimal valor)
    {
        return (valor.ToString().Contains(".") || valor.ToString().Contains(",")) ? valor.ToString() : valor + ",00";
    }
}
