@page "/"

@inject NavigationManager NavManager
@inject PagesService _pagesService

<div id="tudo" style="height: 100vh;" @onmousedown="MouseDown">
    <div id="selecao-contas" style="display: block;float: left;width: 210px;">
        <div>
            Contas
        </div>
            
        <ul style="float: left;" >            
            @foreach (var conta in contas)
            {
                <EditForm Model="conta">
                    <li>
                        @if (conta.Selecionada)
                        {
                            <input type="checkbox" checked name="@conta.Id" @onchange="@(() => ContaClick(conta.Id, false))"/>
                        }
                        else
                        {
                            <input type="checkbox" name="@conta.Id" @onchange="@(() => ContaClick(conta.Id, true))"/>
                        }
                        @conta.Id - @conta.Nome
                    </li>
                </EditForm>
            }
        </ul>
    </div>

    <div id="navegacao-e-transacoes" style="margin:8px;display: grid;"  >
        <div id="navegacao">
            <button @onclick="IrParaMesAnterior" >anterior</button>
            <span>Mês nº @mesAtual.NumMes</span>
            <button @onclick="IrParaMesSeguinte" >seguinte</button>
        </div>
        <div id="adicionar-transacao" style="margin: 8px;">
            <button @onclick="AdicionarTransacao" >+ transacao</button>
        </div>
        <div id="mensagem">
            @mensagem 
        </div>
        
        @if (modoAdicionarTransacao)
        {
            <EditForm Model="mesAtual.NovaTransacao">
                <div id="nova-transacao" style="float:left;margin:8px;width:100%;" @onmouseover="@(() => mouseOverNovaTransacao = true)" @onmouseout="@(() => mouseOverNovaTransacao = false)" >
                    <table class="table transacoes">
                        <tbody>
                            <tr style="background-color: #efefef">
                                <td><input type="text" id="nova-transacao-descricao" @bind-value="mesAtual.NovaTransacao.Descricao" /></td>
                                <td>Categoria</td>
                                <td><input type="number" id="nova-transacao-contaid" @bind-value="mesAtual.NovaTransacao.ContaId" /></td>
                                <td><InputNumberListener @bind-Value="mesAtual.NovaTransacao.Valor" /></td>
                                @* TODO: fazer aceitar valor negativo *@
                            </tr>
                        </tbody>
                    </table>
                </div>
            </EditForm>
        }

        <div id="transacoes" style="float: left;margin: 8px;width: 100%;">
            <table class="table transacoes">
                <thead>
                    <tr>
                        <th>Descricao</th>
                        <th>Categoria</th>
                        <th>Conta</th>
                        <th>Valor</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th colspan="6" style="text-align: right;">
                            Saldo no dia @mesAtual.UltimoDiaMesAnterior: @mesAtual.SaldoFinalUltimoDiaMesAnterior.Valor
                        </th>
                    </tr>

                    @if (mesAtual.Dias != null && mesAtual.Dias.Any())
                    {
                        @foreach (var dia in mesAtual.DiasExibicao)
                        {
                            <tr>
                                <td colspan="4">@dia.Data.ToString("dd/MM/yyyy")</td>
                            </tr>
                            @foreach (var transacao in dia.TransacoesExibicao)
                            {
                                <tr style="background-color: #cccccc">
                                    <td>@transacao.Descricao</td>
                                    <td>@transacao.Categoria</td>
                                    <td>
                                        <select style="background: #cccccc;color: #000;border: 2px solid #cccccc;" >
                                            @foreach(var c in contas)
                                            {
                                                if (c.Id == transacao.Conta.Id)
                                                {
                                                    <option selected>@c.Nome</option>
                                                }
                                                else
                                                {
                                                    <option>@c.Nome</option>                                                    
                                                }
                                            }
                                        </select>
                                    </td>
                                    <td>@transacao.Valor</td>
                                </tr>
                            }
                            <tr>
                                <td colspan="4" style="text-align: right;">Saldo do dia: @dia.SaldoFinalDoDia.Valor</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

</div>

@code {
    private Meses meses;
    private List<Conta> contas;


    private DataMes dataMes;

    private string navMesAnterior => (NavManager.BaseUri + mesAtual.NavMesAnterior);
    private string navMesSeguinte => (NavManager.BaseUri + mesAtual.NavMesSeguinte);

    private Mes mesAtual => meses.ObterMes(dataMes);

    private bool mouseOverNovaTransacao;
    private bool modoAdicionarTransacao = false;

    private string mensagem;

    protected override async Task OnInitializedAsync()
    {
        dataMes = new DataMes(DateTime.Now.Year, DateTime.Now.Month);

        contas = await _pagesService.ObterContas();
        contas.ForEach(x => x.SetarSelecionada(true));
        meses = await _pagesService.ObterMeses(contas);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    void IrParaMesAnterior()
    {
        var numMesAnterior = mesAtual.DataMes.NumMesAnterior;
        var numAnoMesAnteior = mesAtual.DataMes.NumAnoDoMesAnterior;
        dataMes = new DataMes(numAnoMesAnteior, numMesAnterior);
    }

    void IrParaMesSeguinte()
    {
        var numMesSeguinte = mesAtual.DataMes.NumMesSeguinte;
        var numAnoMesSeguinte = mesAtual.DataMes.NumAnoDoMesSeguinte;
        dataMes = new DataMes(numAnoMesSeguinte, numMesSeguinte);
    }

    async void ContaClick(int id, bool selecionada)
    {
        var conta = contas.First(x => x.Id == id);
        conta.SetarSelecionada(selecionada);
    }

    async void AdicionarTransacao()
    {
        modoAdicionarTransacao = true;
    }

    async void MouseDown()
    {
        if (!mouseOverNovaTransacao && modoAdicionarTransacao)
        {
            var conta = contas.First(x => x.Id == mesAtual.NovaTransacao.ContaId);
            mesAtual.NovaTransacao.Conta = conta;
            var resultadoMensagem = await _pagesService.AdicionarTransacao(mesAtual, mesAtual.NovaTransacao);

            if (!string.IsNullOrEmpty(resultadoMensagem))
                mensagem = $"Ocorreu um erro ao adicionar a transacao {resultadoMensagem}";

            modoAdicionarTransacao = false;
        }
    }
}
