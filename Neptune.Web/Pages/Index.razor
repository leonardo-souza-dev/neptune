@page "/"

@inject NavigationManager NavManager
@inject PagesService _pagesService

@*<div>
    <a href="@navMesAnterior" target="_top">anterior</a>
    <span>Mês nº @mesAtual.NumMes</span>
    <a href="@navMesSeguinte" target="_top">próximo</a>
</div>*@

<div>
    <button @onclick="IrParaMesAnterior" >anterior</button>
    <span>Mês nº @MesAtual.NumMes</span>
    <button @onclick="IrParaMesSeguinte" >seguinte</button>
</div>

<div style="display: block;">
    <div>
        <div class="col-2" style="">
            Contas
        </div>
            
        <ul style="float: left;" >            
            @foreach (var contaModel in contasModel)
            {
                <EditForm Model="contaModel">
                    <li>
                        @if (contaModel.Ativo)
                        {
                            <input 
                            type="checkbox" 
                            checked
                            name="@contaModel.Id" />
                        }
                        else
                        {
                            <input 
                            type="checkbox" 
                            name="@contaModel.Id" />
                        }

                        @contaModel.Id - @contaModel.Nome
                    </li>
                </EditForm>
            }
        </ul>
    </div>

    <div class="col-6" style="float: left;">
        <table class="table transacoes">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Descricao</th>
                    <th>Categoria</th>
                    <th>Valor</th>
                    <th>Conta</th>
                    <th>Editar</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th colspan="6" style="text-align: right;">
                        Saldo no dia @MesAtual.UltimoDiaMesAnterior: @MesAtual.SaldoUltimoDiaMesAnterior
                    </th>
                </tr>

                @if (MesAtual.Dias != null && MesAtual.Dias != null && MesAtual.Dias.Any())
                {
                    @foreach (var dia in MesAtual.Dias)
                    {
                        <tr>
                            <td colspan="6">@dia.Data.ToString("dd/MM/yyyy")</td>
                        </tr>
                        @foreach (var transacao in dia.Transacoes)
                        {
                            <tr style="background-color: #cccccc">
                                <td>@transacao.Id</td>
                                <td>@transacao.Descricao</td>
                                <td>@transacao.Categoria</td>
                                <td>@transacao.Valor</td>
                                <td>@transacao.ContaId</td>
                                <td><a href="/editar-transacao/@transacao.Id">Editar</a></td>
                            </tr>
                        }
                        <tr>
                            <td colspan="6" style="text-align: right;">Saldo do dia: @dia.SaldoFinal</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private Meses meses;
    private List<ContaModel> contasModel;

    private int anoo;
    private int mess;

    private DataMes dataMes;

    private string navMesAnterior => (NavManager.BaseUri + MesAtual.NavMesAnterior);
    private string navMesSeguinte => (NavManager.BaseUri + MesAtual.NavMesSeguinte);

    private Mes _mesAtual;
    public Mes MesAtual
    { 
        get => meses.ObterMes(dataMes);
        set => value = _mesAtual;
    }

    private bool firstRender;

    protected override async Task OnInitializedAsync()
    {
        //NavManager.TryGetQueryString<int>("ano", out ano);
        //NavManager.TryGetQueryString<int>("mes", out mes);
        //if (ano == 0 || mes == 0)
        //{
        //    ano = DateTime.Now.Year;
        //    mes = DateTime.Now.Month;
        //}
        dataMes = new DataMes(DateTime.Now.Year, DateTime.Now.Month);

        contasModel = await _pagesService.ObterContas();
        meses = await _pagesService.ObterMeses();
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    void IrParaMesAnterior()
    {
        var numMesAnterior = MesAtual.DataMes.NumMesAnterior;
        var numAnoMesAnteior = MesAtual.DataMes.NumAnoDoMesAnterior;
        dataMes = new DataMes(numAnoMesAnteior, numMesAnterior);
        MesAtual = meses.ObterMes(dataMes);
    }

    void IrParaMesSeguinte()
    {
        var numMesSeguinte = MesAtual.DataMes.NumMesSeguinte;
        var numAnoMesSeguinte = MesAtual.DataMes.NumAnoDoMesSeguinte;
        dataMes = new DataMes(numAnoMesSeguinte, numMesSeguinte);
        MesAtual = meses.ObterMes(dataMes);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int a = 1;
        }
        else
        {
            int b = 1;
        }
    }
}
