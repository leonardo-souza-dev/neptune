@page "/"

@inject NavigationManager NavManager

@inject IContaService _contaService
@inject ICategoriaService _categoriaService

<div id="tudo" style="height: 100vh;width:60%;">
    <div id="coluna" style="width: 190px;">
        <ContasComponent @bind-Itens="_contas" />
        <CategoriasComponent @bind-Itens="_categorias" />
    </div>

    <div id="navegacao-e-transacoes" style="margin:8px;display:grid;">
        <div id="navegacao">
            <button @onclick="(() => { _dataMes = _dataMes.ObterMesAnterior(); })">anterior</button>
            <span>Mês nº @_dataMes.Mes</span>
            <button @onclick="(() => { _dataMes = _dataMes.ObterMesSeguinte(); })">seguinte</button>
        </div>

        <div id="adicionar-transacao" style="margin: 8px;">
            <button @onclick="(() => { modoAdicionarTransacao = true; })">+ transacao</button>
        </div>
        
        @if (modoAdicionarTransacao)
        {
            <NovaTransacaoComponent @bind-ModoAdicionarTransacao="modoAdicionarTransacao" NovaTransacao="new Transacao().ObterNovaTransacao()" Contas="_contas" Categorias="_categorias"  />
        }

        <TransacoesComponent DataMes="_dataMes" Contas="_contas" />
    </div>

</div>

@code {
    private Categorias? _categorias;
    private List<Conta>? _contas;
    private DataMes _dataMes;

    private bool modoAdicionarTransacao = false;

    protected override async Task OnInitializedAsync()
    {
        _dataMes = new DataMes(DateTime.Now.Year, DateTime.Now.Month);

        _contas = await _contaService.ObterTodas();
        _categorias = await _categoriaService.ObterTodasComFilhos();
    }
}
