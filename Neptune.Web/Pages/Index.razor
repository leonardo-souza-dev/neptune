@page "/"

@inject NavigationManager NavManager
@inject PagesService _pagesService

<div id="selecao-contas" style="display: block;float: left;width: 210px;">
    <div>
        Contas
    </div>
            
    <ul style="float: left;" >            
        @foreach (var conta in contas)
        {
            <EditForm Model="conta">
                <li>
                    @if (conta.Selecionada)
                    {
                        <input 
                        type="checkbox" 
                        checked
                        name="@conta.Id"
                        @onchange="@(() => ContaClick(conta.Id, false))"/>
                    }
                    else
                    {
                        <input 
                        type="checkbox" 
                        name="@conta.Id"
                        @onchange="@(() => ContaClick(conta.Id, true))"/>
                    }

                    @conta.Id - @conta.Nome
                </li>
            </EditForm>
        }
    </ul>
</div>

<div style="display: block;">
    <div id="navegacao-e-transacoes" style="margin: 8px;">
        <div id="navegacao">
            <button @onclick="IrParaMesAnterior" >anterior</button>
            <span>Mês nº @MesAtual.NumMes</span>
            <button @onclick="IrParaMesSeguinte" >seguinte</button>
        </div>
        <div id="adicionar-transacao" style="margin: 8px;">
            <button @onclick="AdicionarTransacao" >+ transacao</button>
        </div>
        <div id="transacoes" style="float: left;margin: 8px;width: 50%;">
            <table class="table transacoes">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Descricao</th>
                        <th>Categoria</th>
                        <th>Valor</th>
                        <th>Conta</th>
                        <th>Editar</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th colspan="6" style="text-align: right;">
                            Saldo no dia @MesAtual.UltimoDiaMesAnterior: @MesAtual.SaldoFinalUltimoDiaMesAnterior.Valor
                        </th>
                    </tr>

                    @if (MesAtual.Dias != null && MesAtual.Dias != null && MesAtual.Dias.Any())
                    {
                        @foreach (var dia in MesAtual.Dias.Where(x => x.Transacoes.All(t => t.Conta.Selecionada)))
                        {
                            <tr>
                                <td colspan="6">@dia.Data.ToString("dd/MM/yyyy")</td>
                            </tr>
                            @foreach (var transacao in dia.Transacoes.Where(x => x.Conta.Selecionada))
                            {
                                <tr style="background-color: #cccccc">
                                    <td>@transacao.Id</td>
                                    <td>@transacao.Descricao</td>
                                    <td>@transacao.Categoria</td>
                                    <td>@transacao.Valor</td>
                                    <td>@transacao.Conta.Id</td>
                                    <td><a href="/editar-transacao/@transacao.Id">Editar</a></td>
                                </tr>
                            }
                            <tr>
                                <td colspan="6" style="text-align: right;">Saldo do dia: @dia.SaldoFinalDoDia.Valor</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private Meses meses;
    private List<Conta> contas;

    private DataMes dataMes;

    private string navMesAnterior => (NavManager.BaseUri + MesAtual.NavMesAnterior);
    private string navMesSeguinte => (NavManager.BaseUri + MesAtual.NavMesSeguinte);

    public Mes MesAtual => meses.ObterMes(dataMes);

    protected override async Task OnInitializedAsync()
    {
        dataMes = new DataMes(DateTime.Now.Year, DateTime.Now.Month);

        contas = await _pagesService.ObterContas();
        contas.ForEach(x => x.Selecionada = true);
        meses = await _pagesService.ObterMeses(contas);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    void IrParaMesAnterior()
    {
        var numMesAnterior = MesAtual.DataMes.NumMesAnterior;
        var numAnoMesAnteior = MesAtual.DataMes.NumAnoDoMesAnterior;
        dataMes = new DataMes(numAnoMesAnteior, numMesAnterior);
    }

    void IrParaMesSeguinte()
    {
        var numMesSeguinte = MesAtual.DataMes.NumMesSeguinte;
        var numAnoMesSeguinte = MesAtual.DataMes.NumAnoDoMesSeguinte;
        dataMes = new DataMes(numAnoMesSeguinte, numMesSeguinte);
    }

    async void ContaClick(int id, bool selecionada)
    {
        var conta = contas.First(x => x.Id == id);
        conta.Selecionada = selecionada;
    }

    async void AdicionarTransacao()
    {
    }
}
